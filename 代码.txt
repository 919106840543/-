#include <iostream>
#include <string.h>
#include <math.h>
#include <stack>
#include <iomanip>
#include <cstdlib>
#include <complex.h>
using namespace std;
int len=1; //幂运算 
stack<char> opt;     //操作符栈
stack<double> val;   //操作数栈

//求阶乘所用数组
int LargeNumberFactorial[1000] = { 0 };

//定义两个常量表示在数字中的状态
const int IN = 0;
const int OUT = 1;

char opt_set[10] = "+-*/()=.";
void menu()						//菜单函数 
{															//定义功能分函数 
	void tenToOther(int iTen,int iTran,char * sRet);        //进制转换 
	int otherToTen(char * sInit,int iTran,int iLen);
	void Two_tochange_comperation();						//两个进制数字运算
	void toresult(); 
	void fouroperation();									//四则运算 
	int level(char theOpt);									//操作符的优先级
	bool in_set(char theChar);								//判断输入的操作符是否合法，仅包括()+-*/
	bool del_space(string &theString);						//用于去除空格并检查是否有非法字符
	string to_string(int theInt);							//把数字转换成字符串
	bool change(string &from, string &to);					//将中缀表达式转换成后缀表达式
	bool compute(string &theExp);							//计算后缀表达式
	bool Judge_factorial(string& theStr);					//判断是否为求阶乘
	int cal_factorial(int theInt);							//利用数组求阶乘
	int cal_factorial_number(string& theStr);				//求阶乘所求的数字
	void multiply(int a[],int n,int num);                  //幂运算进位 
	void tc();                                             //退出 
	void tomenu();                                         //返回主菜单 
	void menu1();					//函数运算菜单函数
	int a;
	while(1)												//循环菜单，每进行一项操作返回菜单 
	{														//输出应用界面
		//system("cls"); //清屏										 
		cout<<"============计算器功能选择!============\n";
		cout<<"您是想：                                        |\n";
		cout<<"任意进制转换及运算-----------------------------1|\n";
		cout<<"四则运算---------------------------------------2|\n";
		cout<<"幂运算-----------------------------------------3|\n";
		cout<<"函数运算---------------------------------------4|\n";
		cout<<"两个进制数字计算-------------------------------5|\n";
		cout<<"退出-------------------------------------------0|\n";
		cout<<"请输入您的选择\n";
		cin>>a;
		switch(a)													//选择函数功能 
		{
			case 0: tc();break;
			case 1: 
			{
				system("cls"); //清屏
				string m;
				int nRetCode = 0;
				int iInit;
				int iInput;
				int iTrans;
				char sOut[10];
				char sInput[10];
				while(cin>>m&&m=="进制转换"&&m!=string("四则运算")&&m!=string("返回主菜单"))
				{
					cout<<"输入进制:";
					cin>>iInit;
					cout<<"输入一个数:";
					cin>>sInput;
					cout<<"输入待转换的进制:";
					cin>>iTrans;	
					int iTenTmp = otherToTen(sInput,iInit,strlen(sInput));
					tenToOther(iTenTmp,iTrans,sOut);
					cout<<"结果为：";
					cout<<sOut<<endl;
					cout<<endl;
				}
				if(m==string("四则运算")) 
				{
					fouroperation();
				};
			}	break;
			case 2: system("cls"); //清屏
					return fouroperation();	break;
			case 3: 
			{
				system("cls"); //清屏
				char R[10];
				int n,num,t,i,j,l;//t为小数点的位数 
				while(cin>>R&&R!=string("返回主菜单"))
				{
					cin>>n;
					int a[150]={1};
					num=0,t=0;
					for(i=0;i<strlen(R);i++)
					{
						if(R[i]=='.')
						{
							t=(strlen(R)-1-i)*n;
						}
						else
						{
							num=num*10+R[i]-48;
						}
					}
				multiply(a,n,num);
				if(len<=t)//数组a的位数小于小数位数 
				{
					cout<<".";
					for(i=0;i<t-len;i++)
					cout<<"0";
					for(i=len-1;i>=0;i--)
					cout<<a[i];
				}
				else
				{
					j=0;
					while(a[j]==0&&j<t)//去掉末尾没用的零 
					{
						j++;
					}
					l=len;
					for(i=len-1;i>=j;i--)//去掉前导0 
					{
						if(a[i]==0)
						l--;
						if(a[i]!=0)
						break;
					}
					cout<<"y=x^a="<<R<<"^"<<n<<"=";
					for(i=l-1;i>=j;i--)
					{
						if(i+1==t)
						cout<<".";
						cout<<a[i];
					}
				}
				cout<<endl<<endl;
				}
				if(R==string("返回主菜单"))   tomenu();
			}	break;
			case 4: menu1();break;
			case 5: system("cls"); //清屏
					return Two_tochange_comperation();	break;
		}
	}
} 
void menu1()						//函数运算菜单函数 
{													//定义功能分函数 
	system("cls"); //清屏
	int level(char theOpt);									//操作符的优先级
	string to_string(int theInt);							//把数字转换成字符串
	int Judge_rectangle(string& theStr);					//判断是否为三角函数或反三角函数并返回对应的编号
	double cal_rect_number(string& theStr, int theInt);		//求三角函数里包含的数字并求出对应的结果
	void multiply(int a[],int n,int num);                  //幂运算进位 
	void yyechs();      									//一元二次函数 
	void yyychs();											//一元一次函数 
	void fblhs();											//反比例函数 
	void tomenu();                                         //返回菜单 
	int a;
	while(1)											//循环菜单，每进行一项操作返回菜单 
	{													//输出应用界面 
		cout<<"============函数功能选择!============\n";
		cout<<"您是想：                                        |\n";
		cout<<"三角函数计算-----------------------------------1|\n";
		cout<<"一元一次函数-----------------------------------2|\n";
		cout<<"反比例函数-------------------------------------3|\n";
		cout<<"一元二次函数-----------------------------------4|\n";
		cout<<"指数函数---------------------------------------5|\n";
		cout<<"对数函数---------------------------------------6|\n";
		cout<<"返回主菜单-------------------------------------0|\n";
		cout<<"请输入您的选择\n";
		cin>>a;
		switch(a)													//选择函数功能 
		{
			case 0: tomenu();break;
			case 1: 
			{	
				system("cls"); //清屏 
				string init_exp;
				while(cin>>init_exp&&init_exp!=string("返回菜单")&&init_exp!=string("返回主菜单"))
				{
					if(Judge_rectangle(init_exp) != 0) 
					{		
					double res = 0;
					res = cal_rect_number(init_exp, Judge_rectangle(init_exp));
					if (res)
					cout << "结果为: " << fixed << setprecision(9) << res << endl;
					}
				}
				if (init_exp==string("返回菜单"))  menu1();
				else if (init_exp==string("返回主菜单"))  tomenu();
			}	break;
			case 2: yyychs();break;
			case 3: fblhs();break;
			case 4: yyechs();break;
			case 5:
			{
				system("cls"); //清屏
				char R[10];
				int n,num,t,i,j,l;//t为小数点的位数 
				while(cin>>R&&R!=string("返回主菜单")&&R!=string("返回菜单"))
				{
					cin>>n;
					int a[150]={1};
					num=0,t=0;
					for(i=0;i<strlen(R);i++)
					{
						if(R[i]=='.')
						{
							t=(strlen(R)-1-i)*n;
						}
						else
						{
							num=num*10+R[i]-48;
						}
					}
				multiply(a,n,num);
				if(len<=t)//数组a的位数小于小数位数 
				{
					cout<<".";
					for(i=0;i<t-len;i++)
					cout<<"0";
					for(i=len-1;i>=0;i--)
					cout<<a[i];
				}
				else
				{
					j=0;
					while(a[j]==0&&j<t)//去掉末尾没用的零 
					{
						j++;
					}
					l=len;
					for(i=len-1;i>=j;i--)//去掉前导0 
					{
						if(a[i]==0)
						l--;
						if(a[i]!=0)
						break;
					}
					cout<<"y=a^x="<<R<<"^"<<n<<"=";
					for(i=l-1;i>=j;i--)
					{
						if(i+1==t)
						cout<<".";
						cout<<a[i];
					}
				}
				cout<<endl<<endl;
				}
				if(R==string("返回菜单")) menu1();
				else if(R==string("返回主菜单"))  tomenu();
			}  break;
			case 6:break; 
		}
	}
} 

//返回主菜单函数 
void tomenu()
{
	system("cls");
	return menu();
}
//退出函数 
void tc()
{
	system("cls"); //清屏
	char a;
	cout<<"是否要退出？(y/n)\n";											//询问是否退出 
	getchar();
	cin>>a;
	if(a=='n') return;														//如果输入'n'，退出 
	else exit(0);
}

//任意进制转换 
/***********************************************
函数作用：把十进制转换为其他进制
参数说明：int iTen：十进制数
		  int iTran：待转换数的进制
		  char * sRet：转换后获得的字符串
************************************************/

//任意进制转换 
void tenToOther(int iTen,int iTran,char * sRet)
{
	stack <int> stackInt;//声明一个栈
	int iTop = 0;
	while(iTen > 0)
	{
		stackInt.push(iTen%iTran);//每次把第一次的取余的数压入栈
		iTen /= iTran;//十进制数每次对待转进制取整
	}
	
	int iCnt =0;
	while(!stackInt.empty())
	{
		iTop = stackInt.top();//每次得到栈顶元素
		stackInt.pop();//取出后要进行出栈操作
		if (iTop <10 )
			sRet[iCnt++] = iTop+'0';
		else//如果>=10，变成相应的字母
			sRet[iCnt++] = iTop -10 +'a';
	}
	sRet[iCnt] = 0;
}
/***********************************************
函数作用：把其他进制的数转换为十进制的数
参数说明：char * sInit：输入待转换的字符串
		  int iTran：待转换数的进制
		  int iLen：待转换的字符串的长度
************************************************/
int otherToTen(char * sInit,int iTran,int iLen)
{
	int iTenSum = 0;
	int iTenTmp = 0;
 
	for (int i = 0; i < iLen; i++)//循环扫描字符串
	{
		if ( sInit[i] <= '9')//如果某位小于9，转为int型*相应的倍数
			iTenTmp  = (int)((sInit[i]-'0')*pow(iTran,(iLen-i-1)));
		else//如果某位大于9，转为int型，其中87是用'a'-10,计算出来
			iTenTmp  = (int)((sInit[i]-87)*pow(iTran,(iLen-i-1)));
		iTenSum += iTenTmp;
	}
	return iTenSum;
}

//两个进制数字运算 
void Two_tochange_comperation()
{
	string m;
	int nRetCode = 0;
	int iInit;
	int iInput;
	int iTrans;
	char sOut[10];
	char sInput[10];
	while(cin>>m&&m=="进制转换"&&m!=string("比较大小")&&m!=string("计算公约数")&&m!=string("计算最小公倍数")&&m!=string("返回主菜单"))
	{
		cout<<"输入进制:";
		cin>>iInit;
		cout<<"输入一个数:";
		cin>>sInput;
		cout<<"输入待转换的进制:";
		cin>>iTrans;	
		int iTenTmp = otherToTen(sInput,iInit,strlen(sInput));
		tenToOther(iTenTmp,iTrans,sOut);
		cout<<"结果为：";
		cout<<sOut<<endl;
		cout<<endl;
	}
	if(m==string("比较大小")) 
	{
		double a,b,min,mix;
		cout<<"输入两个数：";
		cin>>a>>b;
		if(a!=b)
		{
			if(a>b)
			{mix=a;min=b;} 
			else 
			{mix=b;min=a;}
			cout<<mix<<">"<<min<<endl;
		}
		else cout<<a<<"="<<b;
		cout<<endl; 
		return Two_tochange_comperation();
	}
	if(m==string("计算公约数"))
	{
		int a,b,c,d,t,max,min;
    	cin>>a>>b;
    	if(b>a)             //如果b>a，交换双方的值，使大者a为被除数
    	{ t=a;a=b;b=t;}
		d=a*b;              //待会计算最小公倍数
    	while((c=a%b)!=0)   //余数不为零，继续执行循环
    	{ a=b;              //使除数b变为被除数a
     	 b=c;              //使余数c变为除数b
     	 }
      	max=b;            //最大公约数
      	min=d/max;        //计算最小公倍数
      cout<<"最大公约数："<<max<<endl;
      cout<<endl;
      return Two_tochange_comperation();
	}
	if(m==string("计算最小公倍数"))
	{
		int a,b,c,d,t,max,min;
    	cin>>a>>b;
    	if(b>a)             //如果b>a，交换双方的值，使大者a为被除数
    	{ t=a;a=b;b=t;}
		d=a*b;              //待会计算最小公倍数
    	while((c=a%b)!=0)   //余数不为零，继续执行循环
    	{ a=b;              //使除数b变为被除数a
     	 b=c;              //使余数c变为除数b
     	 }
      	max=b;            //最大公约数
      	min=d/max;        //计算最小公倍数
      cout<<"最小公倍数："<<min<<endl;
      cout<<endl;
      return Two_tochange_comperation();
	}
	if(m==string("返回主菜单")) tomenu();
}

//大数幂运算
void multiply(int a[],int n,int num)   //进位 
{
	int i,j,t1,tem;//t1为进位
	for(i=1;i<=n;i++) 
	{
		t1=0;
		for(j=0;j<len;j++) 
		{
			tem=a[j]*num;
			a[j]=(tem+t1)%10;
			t1=(tem+t1)/10;
			if(t1!=0&&j==len-1)
			len++;
		}
	}//逆着存的 
} 
//一元二次函数
void yyechs()
{  
	system("cls"); //清屏
	double a,b,c,d,x,y,x1,x2;
	string m;
    while(cin>>m&&m==("输入系数")&&m!=string("返回菜单")&&m!=string("返回主菜单"))
	{	
		cout<<"请输入系数a，b，c，y。"<<endl;
		cin>>a>>b>>c>>y;
		cout<<"你输入的函数是:"<<a<<"x^2+"<<b<<"x+"<<c<<"="<<y<<endl;
		c=c-y;
		d=b*b-4*a*c;
		if(a==0)cout<<"x="<<-c/b<<endl<<endl;
		else if(d>=0)
		{
			if(d>0)
	 	   {
			    x1=((-b)+sqrt(d))/(2*a);
	 	    	x2=((-b)-sqrt(d))/(2*a);	  
	        	cout<<"方程有两个解:"<<"\t"<<"x1="<<x1<<"\t"<<"x2="<<x2<<endl<<endl;  
	    	}
			else
			{
		     	x=((-b)+sqrt(d))/(2*a);
		     	cout<<"方程有一个的根:"<<"x="<<x<<endl<<endl;
			}
    	}
		else 
			cout<<"这个方程没有实数解。"<<endl<<endl;
	}if(m==string("返回菜单")) menu1();
	else if(m==string("返回主菜单"))  tomenu(); 
} 
//一元一次函数 
void yyychs()
{
	system("cls"); //清屏
	double a,b,x,y,X;
	string m;
	while(cin>>m&&m==("输入系数")&&m!=string("返回菜单")&&m!=string("返回主菜单"))
	{
		cout<<"请输入系数a，b，y。"<<endl;
		cin>>a>>b>>y;
		cout<<"你输入的函数是"<<a<<"x+"<<b<<"="<<y<<endl;
		if(a==0)
		cout<<"此函数不成立。"<<endl<<endl;
		else cout<<"X="<<(y-b)/a<<endl<<endl; 
	} if(m==string("返回菜单")) menu1();
	else if(m==string("返回主菜单"))  tomenu(); 
} 
//反比例函数 
void fblhs()
{
	system("cls"); //清屏
	double k,x,y;
	string m;
	while(cin>>m&&m==("输入系数")&&m!=string("返回菜单")&&m!=string("返回主菜单"))
	{
		cout<<"请输入系数k，x。"<<endl;
		cin>>k>>x;
		cout<<"你输入的函数是"<<"y="<<k<<"*"<<x<<"^(-1)"<<endl;
		if(x==0)cout<<"函数不成立。"<<endl<<endl;
		else cout<<"y="<<k/x<<endl<<endl;
	}if(m==string("返回菜单")) menu1();
	else if(m==string("返回主菜单"))  tomenu(); 
} 
/*为每一个操作符返回一个数，数代表了优先级*/
int level(char theOpt)
{
	switch (theOpt) {
	case '(':
		return 0;
	case '+':
	case '-':
		return 1;
	case '*':
	case '/':
		return 2;
	case ')':
		return 3;
	}
}

/*判断输入的操作符是否合法*/
bool in_set(char theChar) {
	for (int i = 0; i < 8; i++) {
		if (theChar == opt_set[i])
			return true;
	}
	return false;
}

/*用于去除空格并检查是否有非法字符*/
bool del_space(string& theString)
{
	string res;
	for (int i = 0; i < theString.length(); i++) {
		if (in_set(theString[i]) || isdigit(theString[i]))
			res += theString[i];
		else if (theString[i] == ' ') {}
		else{ 
			cout << "The enter is Wrong" << endl;
			return false;
		}
	}
	theString = res;
	return true;
}
/*把数字转换成字符串*/
string to_string(int theInt)
{
	if (theInt == 0)
		return string("0");
	bool neg = false;
	if (theInt < 0)
	{
		neg = true;
		theInt = -theInt;
	}
	string res;
	while (theInt != 0)
	{
		char c = (theInt % 10) + '0';
		res = c + res;
		theInt /= 10;
	}
	if (neg)
		res = '-' + res;
	return res;
}

/*将中缀表达式转换成后缀表达式*/
bool change(string &from, string &to)
{
	int theInt = 0;
	int state = OUT;
	char c;

	for (int i = 0; i < from.length(); i++)
	{
		c = from[i];
		if (isdigit(c)) {
			to = to + c;
			theInt *= 10;
			theInt += c - '0';
			state = IN; //状态改为在数字内
		}
		else{
			if (state == IN && c == '.') {
				to = to + '.';
				theInt = 0;
				continue;
			}
			if (state == IN && c != '.') {
				to +=  ' ';
				theInt = 0;
			}
			if (c == '=')
				break;
			else if (c == '(')
				opt.push(c);
			else if (c == ')') {
				while (!opt.empty() && opt.top() != '(') {
					to += opt.top();
					to += ' ';
					opt.pop();
				}
				opt.pop();
			}
			else {
				while (true) {
					if (opt.empty() || opt.top() == '(')
						opt.push(c);
					else if (level(c) > level(opt.top()))
						opt.push(c);
					else {
						to += opt.top();
						to += ' ';
						opt.pop();
						continue;
					}
					break;
				}
			}
			state = OUT; //状态为在数字外
		}
	}
	while (!opt.empty()) {
		to += opt.top();
		to += ' ';
		opt.pop();
	}
	return true;
}

/*计算后缀表达式*/
bool compute(string &theExp)
{
	int theInt = 0; //暂存数字
	int state = OUT;//初始状态为在数字外
	char c;
	bool dot = false;
	double count = 1.0;
	for (int i = 0; i < theExp.length(); i++)
	{
		c = theExp[i];
		if (isdigit(c)|| c == '.') {
			if (isdigit(c)) {
				theInt *= 10;
				theInt += c - '0';
				state = IN; //状态为在数字内
				if (dot == true)
					count *= 10.0;
			}
			if (c == '.') {
				dot = true;
				continue;
			}
		}
		else{
			dot = false;
			double ans = theInt / count;			
			count = 1.0;
			if (state == IN) {
				val.push(ans);
				theInt = 0;
			}
			double x, y;
			if (c != ' ') {
				x = val.top();val.pop();
				y = val.top();val.pop();

				switch (c) {
				case '+':val.push(x + y); break;
				case '-':val.push(y - x); break;
				case '*':val.push(x * y); break;
				case '/':val.push(y / x); break;
				default:cout << "未知的错误!" << endl;
				}
			}
			state = OUT;
		}
	}
	return true;
}

/*判断是否为三角函数或反三角函数并求出里面的数值*/
int Judge_rectangle(string& theStr)
{
	string str1 = "sin";
	string str2 = "cos";
	string str3 = "tan";
	string str4 = "arcsin";
	string str5 = "arccos";
	string str6 = "arctan";
	const char* show1, *show2, *show3, *show4, *show5, *show6;
	show4 = strstr(theStr.c_str(), str4.c_str());
	if (show4 != NULL)
		return 4;
	show5 = strstr(theStr.c_str(), str5.c_str());
	if (show5 != NULL)
		return 5;
	show6 = strstr(theStr.c_str(), str6.c_str());
	if (show6 != NULL)
		return 6;	
	show1 = strstr(theStr.c_str(), str1.c_str());
	if (show1 != NULL)
		return 1;
	show2 = strstr(theStr.c_str(), str2.c_str());
	if (show2 != NULL)
		return 2;
	show3 = strstr(theStr.c_str(), str3.c_str());
	if (show3 != NULL)
		return 3;
	return 0;
}

/*求三角函数里包含的数字并求出对应的结果*/
double cal_rect_number(string& theStr, int theInt)
{
	int number = 0;
	for (int i = 0; theStr[i] != ')'; i++)
	{
		if (isdigit(theStr[i])) {
			number *= 10;
			number += theStr[i] - '0';
		}
	}
	double ans = 0.0;
	switch (theInt)
	{
	case 1:ans = sin(number); break;
	case 2:ans = cos(number); break;
	case 3:ans = tan(number); break;
	case 4:ans = asin(number); break;
	case 5:ans = acos(number); break;
	case 6:ans = atan(number); break;
	default:return 0;
		break;
	}
	return ans;
}

/*判断是否为求阶乘*/
bool Judge_factorial(string& theStr)
{
	int len = theStr.length();
	for (int i = 0; i < len; i++)
		if (theStr[i] == '!')
			return true;
	return false;
}

/*求阶乘所求的数字*/
int cal_factorial_number(string& theStr)
{
	int number = 0;
	for (int i = 0; theStr[i] != '!'; i++)
	{
		if (isdigit(theStr[i])) {
			number *= 10;
			number += theStr[i] - '0';
		}
	}
	return  number;
}

/*利用数组求阶乘*/
int cal_factorial(int theInt)
{
	LargeNumberFactorial[0] = 1;
	LargeNumberFactorial[1] = 1;
	int digit = 1;
	for (int i = 1; i <= theInt; i++)
	{
		for (int j = 1; j <= digit; j++)
		{
			LargeNumberFactorial[j] *= i;
		}
		for (int j = 1; j <= digit; j++)
		{
			if (LargeNumberFactorial[j] > 10)
			{
				for (int k = 1; k <= digit; k++)
				{
					if (LargeNumberFactorial[digit] > 9)
						digit++;
					LargeNumberFactorial[k + 1] += LargeNumberFactorial[k] / 10;
					LargeNumberFactorial[k] %= 10;
				}
			}
		}
	}
	return digit;
}
//四则运算
void fouroperation()
{
				string init_exp;
				while(cin>>init_exp&&init_exp!=string("返回主菜单"))
				{
					cin.clear();
					cin.sync();
					while (!opt.empty()) 
					{
						opt.pop();
					}
					while (!val.empty())
					{
						val.pop();
					}
					del_space(init_exp);//去除空格
					string cng_exp;
					cng_exp.clear();
					change(init_exp, cng_exp);	//转换为后缀表达式
					compute(cng_exp);//计算后缀表达式
					double stdans = val.top();
					cout << "结果为:" << (double)stdans << endl;
				}
				if(init_exp==string("返回主菜单")) tomenu();
}	 
int main()
{
	void menu();
	menu();
	return 0;
}